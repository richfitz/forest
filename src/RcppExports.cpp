// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/forest.h"
#include <Rcpp.h>

using namespace Rcpp;

// to_newick_string
std::string to_newick_string(treetree::tree<forest::rtree::node_type> tr, int digits);
RcppExport SEXP forest_to_newick_string(SEXP trSEXP, SEXP digitsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< treetree::tree<forest::rtree::node_type> >::type tr(trSEXP );
        Rcpp::traits::input_parameter< int >::type digits(digitsSEXP );
        std::string __result = to_newick_string(tr, digits);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// from_newick_node
forest::rtree::node_type from_newick_node(std::string x);
RcppExport SEXP forest_from_newick_node(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type x(xSEXP );
        forest::rtree::node_type __result = from_newick_node(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// from_newick_string
treetree::tree<forest::rtree::node_type> from_newick_string(const std::vector<std::string>& tokens_str);
RcppExport SEXP forest_from_newick_string(SEXP tokens_strSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const std::vector<std::string>& >::type tokens_str(tokens_strSEXP );
        treetree::tree<forest::rtree::node_type> __result = from_newick_string(tokens_str);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// from_ape_internal
treetree::tree<forest::rtree::node_type> from_ape_internal(const std::vector<size_t>& order, const std::vector<size_t>& from, const std::vector<size_t>& to, const std::vector<std::string>& label, const std::vector<double>& length);
RcppExport SEXP forest_from_ape_internal(SEXP orderSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP labelSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const std::vector<size_t>& >::type order(orderSEXP );
        Rcpp::traits::input_parameter< const std::vector<size_t>& >::type from(fromSEXP );
        Rcpp::traits::input_parameter< const std::vector<size_t>& >::type to(toSEXP );
        Rcpp::traits::input_parameter< const std::vector<std::string>& >::type label(labelSEXP );
        Rcpp::traits::input_parameter< const std::vector<double>& >::type length(lengthSEXP );
        treetree::tree<forest::rtree::node_type> __result = from_ape_internal(order, from, to, label, length);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// to_ape_internal
Rcpp::List to_ape_internal(const treetree::tree<forest::rtree::node_type>& tr);
RcppExport SEXP forest_to_ape_internal(SEXP trSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const treetree::tree<forest::rtree::node_type>& >::type tr(trSEXP );
        Rcpp::List __result = to_ape_internal(tr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// drain_tree
Rcpp::List drain_tree(const treetree::tree<forest::rtree::node_type>& tr);
RcppExport SEXP forest_drain_tree(SEXP trSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const treetree::tree<forest::rtree::node_type>& >::type tr(trSEXP );
        Rcpp::List __result = drain_tree(tr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// classify
Rcpp::IntegerVector classify(const treetree::tree<forest::rtree::node_type>& tr, const std::vector<std::string>& labels);
RcppExport SEXP forest_classify(SEXP trSEXP, SEXP labelsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const treetree::tree<forest::rtree::node_type>& >::type tr(trSEXP );
        Rcpp::traits::input_parameter< const std::vector<std::string>& >::type labels(labelsSEXP );
        Rcpp::IntegerVector __result = classify(tr, labels);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// plotting_coordinates
treetree::tree<forest::node<forest::plotting::plot_info> > plotting_coordinates(const treetree::tree<forest::node<Rcpp::RObject> >& tree);
RcppExport SEXP forest_plotting_coordinates(SEXP treeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const treetree::tree<forest::node<Rcpp::RObject> >& >::type tree(treeSEXP );
        treetree::tree<forest::node<forest::plotting::plot_info> > __result = plotting_coordinates(tree);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// plotting_coordinates_clade
treetree::tree<forest::node<forest::plotting::plot_info> > plotting_coordinates_clade(const treetree::tree<forest::node<Rcpp::RObject> >& tree, const std::vector<double>& n_taxa, double p);
RcppExport SEXP forest_plotting_coordinates_clade(SEXP treeSEXP, SEXP n_taxaSEXP, SEXP pSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const treetree::tree<forest::node<Rcpp::RObject> >& >::type tree(treeSEXP );
        Rcpp::traits::input_parameter< const std::vector<double>& >::type n_taxa(n_taxaSEXP );
        Rcpp::traits::input_parameter< double >::type p(pSEXP );
        treetree::tree<forest::node<forest::plotting::plot_info> > __result = plotting_coordinates_clade(tree, n_taxa, p);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
